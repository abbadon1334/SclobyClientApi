<?php
/**
 * SalesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scloby Api
 *
 * <a href='https://developer.scloby.com/apidoc/assets/documentation.json' target='_blank'>https://developer.scloby.com/apidoc/assets/documentation.json</a>  **Introduction**  **The authentication token is issued via Oauth2 standard ( https://oauth.net)**    You can apply for a Scloby test account on our developer portal **https://developer.scloby.com**   Here is your **ClientId** and **ClientSecret** for tests:    **client_id**: SclobyApiDocs    **client_secret**: DdyPNPvfPOGa0Izjct0C   **All data is JSON format, and the Content-Type header of POST/PUT request must be set to application/json.**  **Search Parameters**  You can perform a search in a collection using all first level properties in combination with some parameter, or specifying a value:    property = VALUE if you are searching for all items with a specific property value    property_since = MIN_VALUE if you are searching for all items with property value greater (or equal) than MIN_VALUE     property_max   = MAX_VALUE if you are searching for all items with property value smaller (or equal)than MAX_VALUE   property_like  = LIKE_VALUE if you are searching for a substring content.   You can use property_since and property_max in order to simulate **between** operator If you are using *equal* operator, all other operators for that parameter *will be ingnored*   If you are using _max or _since operator in strings, the alphabetical ordering will be used
 *
 * OpenAPI spec version: 2.0.0
 * Contact: dev@scloby.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SalesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation salesGet
     *
     * Get All Sales
     *
     * @param  bool $pagination Pagination parameter (optional)
     * @param  int $per_page Results_per_page (optional)
     * @param  int $page PAGE_NUMBER(starting from 0 to TOTAL_PAGE-1) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sales
     */
    public function salesGet($pagination = null, $per_page = null, $page = null)
    {
        list($response) = $this->salesGetWithHttpInfo($pagination, $per_page, $page);
        return $response;
    }

    /**
     * Operation salesGetWithHttpInfo
     *
     * Get All Sales
     *
     * @param  bool $pagination Pagination parameter (optional)
     * @param  int $per_page Results_per_page (optional)
     * @param  int $page PAGE_NUMBER(starting from 0 to TOTAL_PAGE-1) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sales, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesGetWithHttpInfo($pagination = null, $per_page = null, $page = null)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesGetRequest($pagination, $per_page, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sales',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesGetAsync
     *
     * Get All Sales
     *
     * @param  bool $pagination Pagination parameter (optional)
     * @param  int $per_page Results_per_page (optional)
     * @param  int $page PAGE_NUMBER(starting from 0 to TOTAL_PAGE-1) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesGetAsync($pagination = null, $per_page = null, $page = null)
    {
        return $this->salesGetAsyncWithHttpInfo($pagination, $per_page, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesGetAsyncWithHttpInfo
     *
     * Get All Sales
     *
     * @param  bool $pagination Pagination parameter (optional)
     * @param  int $per_page Results_per_page (optional)
     * @param  int $page PAGE_NUMBER(starting from 0 to TOTAL_PAGE-1) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesGetAsyncWithHttpInfo($pagination = null, $per_page = null, $page = null)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesGetRequest($pagination, $per_page, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesGet'
     *
     * @param  bool $pagination Pagination parameter (optional)
     * @param  int $per_page Results_per_page (optional)
     * @param  int $page PAGE_NUMBER(starting from 0 to TOTAL_PAGE-1) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesGetRequest($pagination = null, $per_page = null, $page = null)
    {

        $resourcePath = '/sales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination !== null) {
            $queryParams['pagination'] = ObjectSerializer::toQueryValue($pagination, null);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesIdDelete
     *
     * Delete existing Sale
     *
     * @param  string $id id of the Sale that need to be deleted (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function salesIdDelete($id)
    {
        $this->salesIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation salesIdDeleteWithHttpInfo
     *
     * Delete existing Sale
     *
     * @param  string $id id of the Sale that need to be deleted (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->salesIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation salesIdDeleteAsync
     *
     * Delete existing Sale
     *
     * @param  string $id id of the Sale that need to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesIdDeleteAsync($id)
    {
        return $this->salesIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesIdDeleteAsyncWithHttpInfo
     *
     * Delete existing Sale
     *
     * @param  string $id id of the Sale that need to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->salesIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesIdDelete'
     *
     * @param  string $id id of the Sale that need to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling salesIdDelete'
            );
        }

        $resourcePath = '/sales/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesIdGet
     *
     * Get existing Sale
     *
     * @param  string $id id of the sale (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sales
     */
    public function salesIdGet($id)
    {
        list($response) = $this->salesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation salesIdGetWithHttpInfo
     *
     * Get existing Sale
     *
     * @param  string $id id of the sale (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sales, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sales',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesIdGetAsync
     *
     * Get existing Sale
     *
     * @param  string $id id of the sale (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesIdGetAsync($id)
    {
        return $this->salesIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesIdGetAsyncWithHttpInfo
     *
     * Get existing Sale
     *
     * @param  string $id id of the sale (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesIdGet'
     *
     * @param  string $id id of the sale (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling salesIdGet'
            );
        }

        $resourcePath = '/sales/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesIdPut
     *
     * Edit existing Sale
     *
     * @param  \Swagger\Client\Model\Sales $body Object data that need to be updated (required)
     * @param  string $id id of the Sale that need to be updated (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sales
     */
    public function salesIdPut($body, $id)
    {
        list($response) = $this->salesIdPutWithHttpInfo($body, $id);
        return $response;
    }

    /**
     * Operation salesIdPutWithHttpInfo
     *
     * Edit existing Sale
     *
     * @param  \Swagger\Client\Model\Sales $body Object data that need to be updated (required)
     * @param  string $id id of the Sale that need to be updated (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sales, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesIdPutWithHttpInfo($body, $id)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesIdPutRequest($body, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sales',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesIdPutAsync
     *
     * Edit existing Sale
     *
     * @param  \Swagger\Client\Model\Sales $body Object data that need to be updated (required)
     * @param  string $id id of the Sale that need to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesIdPutAsync($body, $id)
    {
        return $this->salesIdPutAsyncWithHttpInfo($body, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesIdPutAsyncWithHttpInfo
     *
     * Edit existing Sale
     *
     * @param  \Swagger\Client\Model\Sales $body Object data that need to be updated (required)
     * @param  string $id id of the Sale that need to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesIdPutAsyncWithHttpInfo($body, $id)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesIdPutRequest($body, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesIdPut'
     *
     * @param  \Swagger\Client\Model\Sales $body Object data that need to be updated (required)
     * @param  string $id id of the Sale that need to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesIdPutRequest($body, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling salesIdPut'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling salesIdPut'
            );
        }

        $resourcePath = '/sales/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesPost
     *
     * Add new Sale
     *
     * @param  \Swagger\Client\Model\Sales $body **Sale.sale_items attributes explanaion**

A sale contains an array named sale_items, that contains the items (and its discount/surcharges) you want to sell.



Each item has the following important attributes:

- **department_id**: The integer id of department (see /departments endpoint) related to this item, it is very important because the italian fiscal printers want to know exactly which is the department for each item sold, because for each department there is a VAT percentage ( see /vat endpoint ) that the printer know for its internal fiscal aggregates.

- **department_name**: The name of related department.

- **vat_perc**: The VAT percentage for this related department.

- **item_id**: The integer id of item sold (not necessary but useful).

- **name**: The name of the item sold,

- **price**: Unit price of this item (before surcharge and discount).

- **quantity**: Sold quantity of this item, can be decimal and negative in refund case.

- **type**: Can be &#x27;Sale&#x27; (quantity &gt; 0), &#x27;refund&#x27; (quantity &lt; 0) or &#x27;gift&#x27; (price &#x3D; 0)

- **uuid**: That identifies univocally the sale item (in UUID standard format).

- **price_changes**: Each sale item can have an array of discount/surcharges that is called price_changes, and is applied to price in the order specified by each index.Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

 2. **index**: An integer number that is used for order apply.

 3. **type**: Can be: 

 - **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €.

- **discount_perc**: If is a percentage discount, for example 10 % discount.

 - **surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

 - **surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %. 

 4. **value**: Value of this discount/surcharge.

 Example:

 - Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

- Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 - **final_price**:  Unit price, with applied its surcharge and discounts and a quota of global discount/surcharges (in sale document), VAT included Example. 

  If a sale item has quantity 2, a price and 2 price_changes: 1st element discount_perc (index &#x3D; 1) and 2nd element surcharge_fix (index &#x3D; 0), and 1 global discount_fix and 1 global discount_perc



 var partial_final_price &#x3D; sale_item.price sale_item.quantity

 [ sale_item.price_changes[1].index &#x3D; 0 ] partial_final_price &#x3D; partial_final_price + sale_item.price_changes[1].value

  [ sale_item.price_changes[1].index &#x3D; 1 ] partial_final_price &#x3D; partial_final_price ( 1 - sale_item.price_changes[0].value/100 )

Partial final price with global discount/surcharge quota:var total_discounted &#x3D; sale.amount - sale.price_changes[0].value

   total_discounted +&#x3D; sale.amount - (sale.amount * sale.price_changes[1].value/100)

   var total_discount &#x3D; sale.amount - total_discounted

 partial_final_price &#x3D; partial_final_price - (total_discount * partial_final_price / sale.amount)sale_item.final_price &#x3D; partial_final_price / sale_item.quantity


- final_net_price: Unit price, with applied surcharge and discounts, VAT excluded sale_item.final_net_price &#x3D; sale_item.final_price / ( 1 + sale_item.vat_perc)

 **Sale attributes explanation**

A sale is composed by a group of general attributes, in particular we must put attention on sale amounts, global discounts and surcharges:

 - **price_changes**: Each sale can have an array of discount/surcharges that is called price_changes, and is applied to amount in the order specified by each index.

Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

2. **index**: An integer number that is used for order apply.

 3. **type**: can be: 

 **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €

**discount_perc**: If is a percentage discount, for example 10 % discount

**surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

**surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %


4. **value**: Value of this discount/surcharge. Example: 


  1. Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

 2.Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 **amount**: Sum of price quantity + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is excluded.

 Example 1: If a sale has 3 items sale_items in sale items array, each with 1 discount_fix:

  sale.amount &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price - sale.sale_items[0].price_changes[0].value + sale.sale_items[1].quantity * sale.sale_items[1].price - sale.sale_items[1].price_changes[0].value +sale.sale_items[2].quantity * sale.sale_items[2].price - sale.sale_items[0].price_changes[0].value

 Example 2:If a sale has 2 items sale_items in sale items array, each with 1 discount_perc (index &#x3D; 0) and 1 surcharge_fix (index &#x3D; 1):

var partial_item_1 &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price partial_item_1 &#x3D; partial_item_1 - sale.sale_items[0].price_changes[0].value partial_item_1 &#x3D; partial_item_1 * ( 1 + sale.sale_items[0].price_changes[1].value/10 )

  var partial_item_2 &#x3D; sale.sale_items[1].quantity * sale.sale_items[1].price partial_item_2 &#x3D; partial_item_2 - sale.sale_items[1].price_changes[0].value partial_item_2 &#x3D; partial_item_2 * ( 1 + sale.sale_items[1].price_changes[1].value/100 ) 

 sale.amount &#x3D; partial_item_1 + partial_item_2


 - **final_amount**: Sum of (price quantity) + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is included.

 Example 1A) If a sale has 3 items sale_items in sale items array, each with 1 discount_fix (like example 1), and 3 global price_changes (first with type &#x3D; discount_perc and index &#x3D; 0, second with type &#x3D; surcharge_fix and index &#x3D; 1, third with type &#x3D; surcharge_perc and index &#x3D; 2):

 sale.final_amount &#x3D; sale.amount * ( 1 - sale.price_changes[0].value/100)

sale.final_amount &#x3D; sale.final_amount + sale.price_change[1].value

sale.final_amount &#x3D; sale.final_amount * ( 1 + sale.price_change[1].value/100 )


 **final_net_amount**: Is the sum of each sale_item_net_price.


Sale POST Data example (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sales
     */
    public function salesPost($body)
    {
        list($response) = $this->salesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation salesPostWithHttpInfo
     *
     * Add new Sale
     *
     * @param  \Swagger\Client\Model\Sales $body **Sale.sale_items attributes explanaion**

A sale contains an array named sale_items, that contains the items (and its discount/surcharges) you want to sell.



Each item has the following important attributes:

- **department_id**: The integer id of department (see /departments endpoint) related to this item, it is very important because the italian fiscal printers want to know exactly which is the department for each item sold, because for each department there is a VAT percentage ( see /vat endpoint ) that the printer know for its internal fiscal aggregates.

- **department_name**: The name of related department.

- **vat_perc**: The VAT percentage for this related department.

- **item_id**: The integer id of item sold (not necessary but useful).

- **name**: The name of the item sold,

- **price**: Unit price of this item (before surcharge and discount).

- **quantity**: Sold quantity of this item, can be decimal and negative in refund case.

- **type**: Can be &#x27;Sale&#x27; (quantity &gt; 0), &#x27;refund&#x27; (quantity &lt; 0) or &#x27;gift&#x27; (price &#x3D; 0)

- **uuid**: That identifies univocally the sale item (in UUID standard format).

- **price_changes**: Each sale item can have an array of discount/surcharges that is called price_changes, and is applied to price in the order specified by each index.Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

 2. **index**: An integer number that is used for order apply.

 3. **type**: Can be: 

 - **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €.

- **discount_perc**: If is a percentage discount, for example 10 % discount.

 - **surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

 - **surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %. 

 4. **value**: Value of this discount/surcharge.

 Example:

 - Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

- Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 - **final_price**:  Unit price, with applied its surcharge and discounts and a quota of global discount/surcharges (in sale document), VAT included Example. 

  If a sale item has quantity 2, a price and 2 price_changes: 1st element discount_perc (index &#x3D; 1) and 2nd element surcharge_fix (index &#x3D; 0), and 1 global discount_fix and 1 global discount_perc



 var partial_final_price &#x3D; sale_item.price sale_item.quantity

 [ sale_item.price_changes[1].index &#x3D; 0 ] partial_final_price &#x3D; partial_final_price + sale_item.price_changes[1].value

  [ sale_item.price_changes[1].index &#x3D; 1 ] partial_final_price &#x3D; partial_final_price ( 1 - sale_item.price_changes[0].value/100 )

Partial final price with global discount/surcharge quota:var total_discounted &#x3D; sale.amount - sale.price_changes[0].value

   total_discounted +&#x3D; sale.amount - (sale.amount * sale.price_changes[1].value/100)

   var total_discount &#x3D; sale.amount - total_discounted

 partial_final_price &#x3D; partial_final_price - (total_discount * partial_final_price / sale.amount)sale_item.final_price &#x3D; partial_final_price / sale_item.quantity


- final_net_price: Unit price, with applied surcharge and discounts, VAT excluded sale_item.final_net_price &#x3D; sale_item.final_price / ( 1 + sale_item.vat_perc)

 **Sale attributes explanation**

A sale is composed by a group of general attributes, in particular we must put attention on sale amounts, global discounts and surcharges:

 - **price_changes**: Each sale can have an array of discount/surcharges that is called price_changes, and is applied to amount in the order specified by each index.

Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

2. **index**: An integer number that is used for order apply.

 3. **type**: can be: 

 **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €

**discount_perc**: If is a percentage discount, for example 10 % discount

**surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

**surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %


4. **value**: Value of this discount/surcharge. Example: 


  1. Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

 2.Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 **amount**: Sum of price quantity + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is excluded.

 Example 1: If a sale has 3 items sale_items in sale items array, each with 1 discount_fix:

  sale.amount &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price - sale.sale_items[0].price_changes[0].value + sale.sale_items[1].quantity * sale.sale_items[1].price - sale.sale_items[1].price_changes[0].value +sale.sale_items[2].quantity * sale.sale_items[2].price - sale.sale_items[0].price_changes[0].value

 Example 2:If a sale has 2 items sale_items in sale items array, each with 1 discount_perc (index &#x3D; 0) and 1 surcharge_fix (index &#x3D; 1):

var partial_item_1 &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price partial_item_1 &#x3D; partial_item_1 - sale.sale_items[0].price_changes[0].value partial_item_1 &#x3D; partial_item_1 * ( 1 + sale.sale_items[0].price_changes[1].value/10 )

  var partial_item_2 &#x3D; sale.sale_items[1].quantity * sale.sale_items[1].price partial_item_2 &#x3D; partial_item_2 - sale.sale_items[1].price_changes[0].value partial_item_2 &#x3D; partial_item_2 * ( 1 + sale.sale_items[1].price_changes[1].value/100 ) 

 sale.amount &#x3D; partial_item_1 + partial_item_2


 - **final_amount**: Sum of (price quantity) + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is included.

 Example 1A) If a sale has 3 items sale_items in sale items array, each with 1 discount_fix (like example 1), and 3 global price_changes (first with type &#x3D; discount_perc and index &#x3D; 0, second with type &#x3D; surcharge_fix and index &#x3D; 1, third with type &#x3D; surcharge_perc and index &#x3D; 2):

 sale.final_amount &#x3D; sale.amount * ( 1 - sale.price_changes[0].value/100)

sale.final_amount &#x3D; sale.final_amount + sale.price_change[1].value

sale.final_amount &#x3D; sale.final_amount * ( 1 + sale.price_change[1].value/100 )


 **final_net_amount**: Is the sum of each sale_item_net_price.


Sale POST Data example (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sales, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesPostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sales',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesPostAsync
     *
     * Add new Sale
     *
     * @param  \Swagger\Client\Model\Sales $body **Sale.sale_items attributes explanaion**

A sale contains an array named sale_items, that contains the items (and its discount/surcharges) you want to sell.



Each item has the following important attributes:

- **department_id**: The integer id of department (see /departments endpoint) related to this item, it is very important because the italian fiscal printers want to know exactly which is the department for each item sold, because for each department there is a VAT percentage ( see /vat endpoint ) that the printer know for its internal fiscal aggregates.

- **department_name**: The name of related department.

- **vat_perc**: The VAT percentage for this related department.

- **item_id**: The integer id of item sold (not necessary but useful).

- **name**: The name of the item sold,

- **price**: Unit price of this item (before surcharge and discount).

- **quantity**: Sold quantity of this item, can be decimal and negative in refund case.

- **type**: Can be &#x27;Sale&#x27; (quantity &gt; 0), &#x27;refund&#x27; (quantity &lt; 0) or &#x27;gift&#x27; (price &#x3D; 0)

- **uuid**: That identifies univocally the sale item (in UUID standard format).

- **price_changes**: Each sale item can have an array of discount/surcharges that is called price_changes, and is applied to price in the order specified by each index.Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

 2. **index**: An integer number that is used for order apply.

 3. **type**: Can be: 

 - **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €.

- **discount_perc**: If is a percentage discount, for example 10 % discount.

 - **surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

 - **surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %. 

 4. **value**: Value of this discount/surcharge.

 Example:

 - Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

- Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 - **final_price**:  Unit price, with applied its surcharge and discounts and a quota of global discount/surcharges (in sale document), VAT included Example. 

  If a sale item has quantity 2, a price and 2 price_changes: 1st element discount_perc (index &#x3D; 1) and 2nd element surcharge_fix (index &#x3D; 0), and 1 global discount_fix and 1 global discount_perc



 var partial_final_price &#x3D; sale_item.price sale_item.quantity

 [ sale_item.price_changes[1].index &#x3D; 0 ] partial_final_price &#x3D; partial_final_price + sale_item.price_changes[1].value

  [ sale_item.price_changes[1].index &#x3D; 1 ] partial_final_price &#x3D; partial_final_price ( 1 - sale_item.price_changes[0].value/100 )

Partial final price with global discount/surcharge quota:var total_discounted &#x3D; sale.amount - sale.price_changes[0].value

   total_discounted +&#x3D; sale.amount - (sale.amount * sale.price_changes[1].value/100)

   var total_discount &#x3D; sale.amount - total_discounted

 partial_final_price &#x3D; partial_final_price - (total_discount * partial_final_price / sale.amount)sale_item.final_price &#x3D; partial_final_price / sale_item.quantity


- final_net_price: Unit price, with applied surcharge and discounts, VAT excluded sale_item.final_net_price &#x3D; sale_item.final_price / ( 1 + sale_item.vat_perc)

 **Sale attributes explanation**

A sale is composed by a group of general attributes, in particular we must put attention on sale amounts, global discounts and surcharges:

 - **price_changes**: Each sale can have an array of discount/surcharges that is called price_changes, and is applied to amount in the order specified by each index.

Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

2. **index**: An integer number that is used for order apply.

 3. **type**: can be: 

 **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €

**discount_perc**: If is a percentage discount, for example 10 % discount

**surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

**surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %


4. **value**: Value of this discount/surcharge. Example: 


  1. Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

 2.Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 **amount**: Sum of price quantity + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is excluded.

 Example 1: If a sale has 3 items sale_items in sale items array, each with 1 discount_fix:

  sale.amount &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price - sale.sale_items[0].price_changes[0].value + sale.sale_items[1].quantity * sale.sale_items[1].price - sale.sale_items[1].price_changes[0].value +sale.sale_items[2].quantity * sale.sale_items[2].price - sale.sale_items[0].price_changes[0].value

 Example 2:If a sale has 2 items sale_items in sale items array, each with 1 discount_perc (index &#x3D; 0) and 1 surcharge_fix (index &#x3D; 1):

var partial_item_1 &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price partial_item_1 &#x3D; partial_item_1 - sale.sale_items[0].price_changes[0].value partial_item_1 &#x3D; partial_item_1 * ( 1 + sale.sale_items[0].price_changes[1].value/10 )

  var partial_item_2 &#x3D; sale.sale_items[1].quantity * sale.sale_items[1].price partial_item_2 &#x3D; partial_item_2 - sale.sale_items[1].price_changes[0].value partial_item_2 &#x3D; partial_item_2 * ( 1 + sale.sale_items[1].price_changes[1].value/100 ) 

 sale.amount &#x3D; partial_item_1 + partial_item_2


 - **final_amount**: Sum of (price quantity) + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is included.

 Example 1A) If a sale has 3 items sale_items in sale items array, each with 1 discount_fix (like example 1), and 3 global price_changes (first with type &#x3D; discount_perc and index &#x3D; 0, second with type &#x3D; surcharge_fix and index &#x3D; 1, third with type &#x3D; surcharge_perc and index &#x3D; 2):

 sale.final_amount &#x3D; sale.amount * ( 1 - sale.price_changes[0].value/100)

sale.final_amount &#x3D; sale.final_amount + sale.price_change[1].value

sale.final_amount &#x3D; sale.final_amount * ( 1 + sale.price_change[1].value/100 )


 **final_net_amount**: Is the sum of each sale_item_net_price.


Sale POST Data example (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesPostAsync($body)
    {
        return $this->salesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesPostAsyncWithHttpInfo
     *
     * Add new Sale
     *
     * @param  \Swagger\Client\Model\Sales $body **Sale.sale_items attributes explanaion**

A sale contains an array named sale_items, that contains the items (and its discount/surcharges) you want to sell.



Each item has the following important attributes:

- **department_id**: The integer id of department (see /departments endpoint) related to this item, it is very important because the italian fiscal printers want to know exactly which is the department for each item sold, because for each department there is a VAT percentage ( see /vat endpoint ) that the printer know for its internal fiscal aggregates.

- **department_name**: The name of related department.

- **vat_perc**: The VAT percentage for this related department.

- **item_id**: The integer id of item sold (not necessary but useful).

- **name**: The name of the item sold,

- **price**: Unit price of this item (before surcharge and discount).

- **quantity**: Sold quantity of this item, can be decimal and negative in refund case.

- **type**: Can be &#x27;Sale&#x27; (quantity &gt; 0), &#x27;refund&#x27; (quantity &lt; 0) or &#x27;gift&#x27; (price &#x3D; 0)

- **uuid**: That identifies univocally the sale item (in UUID standard format).

- **price_changes**: Each sale item can have an array of discount/surcharges that is called price_changes, and is applied to price in the order specified by each index.Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

 2. **index**: An integer number that is used for order apply.

 3. **type**: Can be: 

 - **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €.

- **discount_perc**: If is a percentage discount, for example 10 % discount.

 - **surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

 - **surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %. 

 4. **value**: Value of this discount/surcharge.

 Example:

 - Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

- Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 - **final_price**:  Unit price, with applied its surcharge and discounts and a quota of global discount/surcharges (in sale document), VAT included Example. 

  If a sale item has quantity 2, a price and 2 price_changes: 1st element discount_perc (index &#x3D; 1) and 2nd element surcharge_fix (index &#x3D; 0), and 1 global discount_fix and 1 global discount_perc



 var partial_final_price &#x3D; sale_item.price sale_item.quantity

 [ sale_item.price_changes[1].index &#x3D; 0 ] partial_final_price &#x3D; partial_final_price + sale_item.price_changes[1].value

  [ sale_item.price_changes[1].index &#x3D; 1 ] partial_final_price &#x3D; partial_final_price ( 1 - sale_item.price_changes[0].value/100 )

Partial final price with global discount/surcharge quota:var total_discounted &#x3D; sale.amount - sale.price_changes[0].value

   total_discounted +&#x3D; sale.amount - (sale.amount * sale.price_changes[1].value/100)

   var total_discount &#x3D; sale.amount - total_discounted

 partial_final_price &#x3D; partial_final_price - (total_discount * partial_final_price / sale.amount)sale_item.final_price &#x3D; partial_final_price / sale_item.quantity


- final_net_price: Unit price, with applied surcharge and discounts, VAT excluded sale_item.final_net_price &#x3D; sale_item.final_price / ( 1 + sale_item.vat_perc)

 **Sale attributes explanation**

A sale is composed by a group of general attributes, in particular we must put attention on sale amounts, global discounts and surcharges:

 - **price_changes**: Each sale can have an array of discount/surcharges that is called price_changes, and is applied to amount in the order specified by each index.

Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

2. **index**: An integer number that is used for order apply.

 3. **type**: can be: 

 **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €

**discount_perc**: If is a percentage discount, for example 10 % discount

**surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

**surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %


4. **value**: Value of this discount/surcharge. Example: 


  1. Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

 2.Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 **amount**: Sum of price quantity + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is excluded.

 Example 1: If a sale has 3 items sale_items in sale items array, each with 1 discount_fix:

  sale.amount &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price - sale.sale_items[0].price_changes[0].value + sale.sale_items[1].quantity * sale.sale_items[1].price - sale.sale_items[1].price_changes[0].value +sale.sale_items[2].quantity * sale.sale_items[2].price - sale.sale_items[0].price_changes[0].value

 Example 2:If a sale has 2 items sale_items in sale items array, each with 1 discount_perc (index &#x3D; 0) and 1 surcharge_fix (index &#x3D; 1):

var partial_item_1 &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price partial_item_1 &#x3D; partial_item_1 - sale.sale_items[0].price_changes[0].value partial_item_1 &#x3D; partial_item_1 * ( 1 + sale.sale_items[0].price_changes[1].value/10 )

  var partial_item_2 &#x3D; sale.sale_items[1].quantity * sale.sale_items[1].price partial_item_2 &#x3D; partial_item_2 - sale.sale_items[1].price_changes[0].value partial_item_2 &#x3D; partial_item_2 * ( 1 + sale.sale_items[1].price_changes[1].value/100 ) 

 sale.amount &#x3D; partial_item_1 + partial_item_2


 - **final_amount**: Sum of (price quantity) + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is included.

 Example 1A) If a sale has 3 items sale_items in sale items array, each with 1 discount_fix (like example 1), and 3 global price_changes (first with type &#x3D; discount_perc and index &#x3D; 0, second with type &#x3D; surcharge_fix and index &#x3D; 1, third with type &#x3D; surcharge_perc and index &#x3D; 2):

 sale.final_amount &#x3D; sale.amount * ( 1 - sale.price_changes[0].value/100)

sale.final_amount &#x3D; sale.final_amount + sale.price_change[1].value

sale.final_amount &#x3D; sale.final_amount * ( 1 + sale.price_change[1].value/100 )


 **final_net_amount**: Is the sum of each sale_item_net_price.


Sale POST Data example (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesPostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\Sales';
        $request = $this->salesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesPost'
     *
     * @param  \Swagger\Client\Model\Sales $body **Sale.sale_items attributes explanaion**

A sale contains an array named sale_items, that contains the items (and its discount/surcharges) you want to sell.



Each item has the following important attributes:

- **department_id**: The integer id of department (see /departments endpoint) related to this item, it is very important because the italian fiscal printers want to know exactly which is the department for each item sold, because for each department there is a VAT percentage ( see /vat endpoint ) that the printer know for its internal fiscal aggregates.

- **department_name**: The name of related department.

- **vat_perc**: The VAT percentage for this related department.

- **item_id**: The integer id of item sold (not necessary but useful).

- **name**: The name of the item sold,

- **price**: Unit price of this item (before surcharge and discount).

- **quantity**: Sold quantity of this item, can be decimal and negative in refund case.

- **type**: Can be &#x27;Sale&#x27; (quantity &gt; 0), &#x27;refund&#x27; (quantity &lt; 0) or &#x27;gift&#x27; (price &#x3D; 0)

- **uuid**: That identifies univocally the sale item (in UUID standard format).

- **price_changes**: Each sale item can have an array of discount/surcharges that is called price_changes, and is applied to price in the order specified by each index.Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

 2. **index**: An integer number that is used for order apply.

 3. **type**: Can be: 

 - **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €.

- **discount_perc**: If is a percentage discount, for example 10 % discount.

 - **surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

 - **surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %. 

 4. **value**: Value of this discount/surcharge.

 Example:

 - Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

- Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 - **final_price**:  Unit price, with applied its surcharge and discounts and a quota of global discount/surcharges (in sale document), VAT included Example. 

  If a sale item has quantity 2, a price and 2 price_changes: 1st element discount_perc (index &#x3D; 1) and 2nd element surcharge_fix (index &#x3D; 0), and 1 global discount_fix and 1 global discount_perc



 var partial_final_price &#x3D; sale_item.price sale_item.quantity

 [ sale_item.price_changes[1].index &#x3D; 0 ] partial_final_price &#x3D; partial_final_price + sale_item.price_changes[1].value

  [ sale_item.price_changes[1].index &#x3D; 1 ] partial_final_price &#x3D; partial_final_price ( 1 - sale_item.price_changes[0].value/100 )

Partial final price with global discount/surcharge quota:var total_discounted &#x3D; sale.amount - sale.price_changes[0].value

   total_discounted +&#x3D; sale.amount - (sale.amount * sale.price_changes[1].value/100)

   var total_discount &#x3D; sale.amount - total_discounted

 partial_final_price &#x3D; partial_final_price - (total_discount * partial_final_price / sale.amount)sale_item.final_price &#x3D; partial_final_price / sale_item.quantity


- final_net_price: Unit price, with applied surcharge and discounts, VAT excluded sale_item.final_net_price &#x3D; sale_item.final_price / ( 1 + sale_item.vat_perc)

 **Sale attributes explanation**

A sale is composed by a group of general attributes, in particular we must put attention on sale amounts, global discounts and surcharges:

 - **price_changes**: Each sale can have an array of discount/surcharges that is called price_changes, and is applied to amount in the order specified by each index.

Each price_change is composed by:

 1. **description**: A textual description of this discount/surcharge.

2. **index**: An integer number that is used for order apply.

 3. **type**: can be: 

 **discount_fix**: Is if a fixed value discount, for example a discount of 1.00 €

**discount_perc**: If is a percentage discount, for example 10 % discount

**surcharge_fix**: If is a fixed value surcharge, for example a surcharge of 1.00 €.

**surcharge_perc**: If is a percentage value surchage, for example a surcharge of 10 %


4. **value**: Value of this discount/surcharge. Example: 


  1. Case of 1.00 € discount/surcharge (discount_fix/surcharge_fix), &#x27;value&#x27;:1.00

 2.Case of 10 % discount/surcharge (discount_perc/surcharge_perc), &#x27;value&#x27;:10.00

 **amount**: Sum of price quantity + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is excluded.

 Example 1: If a sale has 3 items sale_items in sale items array, each with 1 discount_fix:

  sale.amount &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price - sale.sale_items[0].price_changes[0].value + sale.sale_items[1].quantity * sale.sale_items[1].price - sale.sale_items[1].price_changes[0].value +sale.sale_items[2].quantity * sale.sale_items[2].price - sale.sale_items[0].price_changes[0].value

 Example 2:If a sale has 2 items sale_items in sale items array, each with 1 discount_perc (index &#x3D; 0) and 1 surcharge_fix (index &#x3D; 1):

var partial_item_1 &#x3D; sale.sale_items[0].quantity * sale.sale_items[0].price partial_item_1 &#x3D; partial_item_1 - sale.sale_items[0].price_changes[0].value partial_item_1 &#x3D; partial_item_1 * ( 1 + sale.sale_items[0].price_changes[1].value/10 )

  var partial_item_2 &#x3D; sale.sale_items[1].quantity * sale.sale_items[1].price partial_item_2 &#x3D; partial_item_2 - sale.sale_items[1].price_changes[0].value partial_item_2 &#x3D; partial_item_2 * ( 1 + sale.sale_items[1].price_changes[1].value/100 ) 

 sale.amount &#x3D; partial_item_1 + partial_item_2


 - **final_amount**: Sum of (price quantity) + discount/surcharges of all sale_items, global discount/surcharges (that is applied on amount*) is included.

 Example 1A) If a sale has 3 items sale_items in sale items array, each with 1 discount_fix (like example 1), and 3 global price_changes (first with type &#x3D; discount_perc and index &#x3D; 0, second with type &#x3D; surcharge_fix and index &#x3D; 1, third with type &#x3D; surcharge_perc and index &#x3D; 2):

 sale.final_amount &#x3D; sale.amount * ( 1 - sale.price_changes[0].value/100)

sale.final_amount &#x3D; sale.final_amount + sale.price_change[1].value

sale.final_amount &#x3D; sale.final_amount * ( 1 + sale.price_change[1].value/100 )


 **final_net_amount**: Is the sum of each sale_item_net_price.


Sale POST Data example (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling salesPost'
            );
        }

        $resourcePath = '/sales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
