<?php
/**
 * StockMovements
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scloby Api
 *
 * <a href='https://developer.scloby.com/apidoc/assets/documentation.json' target='_blank'>https://developer.scloby.com/apidoc/assets/documentation.json</a>  **Introduction**  **The authentication token is issued via Oauth2 standard ( https://oauth.net)**    You can apply for a Scloby test account on our developer portal **https://developer.scloby.com**   Here is your **ClientId** and **ClientSecret** for tests:    **client_id**: SclobyApiDocs    **client_secret**: DdyPNPvfPOGa0Izjct0C   **All data is JSON format, and the Content-Type header of POST/PUT request must be set to application/json.**  **Search Parameters**  You can perform a search in a collection using all first level properties in combination with some parameter, or specifying a value:    property = VALUE if you are searching for all items with a specific property value    property_since = MIN_VALUE if you are searching for all items with property value greater (or equal) than MIN_VALUE     property_max   = MAX_VALUE if you are searching for all items with property value smaller (or equal)than MAX_VALUE   property_like  = LIKE_VALUE if you are searching for a substring content.   You can use property_since and property_max in order to simulate **between** operator If you are using *equal* operator, all other operators for that parameter *will be ingnored*   If you are using _max or _since operator in strings, the alphabetical ordering will be used
 *
 * OpenAPI spec version: 2.0.0
 * Contact: dev@scloby.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StockMovements Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StockMovements implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'stock_movements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'item_id' => 'int',
'combination_id' => 'int',
'raw_material_id' => 'int',
'entry_type' => 'string',
'name' => 'string',
'barcode' => 'string',
'code' => 'string',
'options_values' => 'string',
'combination' => 'string',
'supplier_id' => 'int',
'supplier_name' => 'string',
'supplier_order' => 'string',
'sale_id' => 'int',
'quantity' => 'float',
'unit' => 'string',
'type' => 'string',
'load_cause' => 'string',
'unload_cause' => 'string',
'operator_id' => 'int',
'operator_username' => 'string',
'operator_fullname' => 'string',
'date' => '\DateTime',
'notes' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'deleted_at' => '\DateTime',
'createdby_id' => 'int',
'updatedby_id' => 'int',
'deletedby_id' => 'int',
'operator_name' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'item_id' => null,
'combination_id' => null,
'raw_material_id' => null,
'entry_type' => null,
'name' => null,
'barcode' => null,
'code' => null,
'options_values' => null,
'combination' => null,
'supplier_id' => null,
'supplier_name' => null,
'supplier_order' => null,
'sale_id' => null,
'quantity' => null,
'unit' => null,
'type' => null,
'load_cause' => null,
'unload_cause' => null,
'operator_id' => null,
'operator_username' => null,
'operator_fullname' => null,
'date' => 'date-time',
'notes' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'deleted_at' => 'date-time',
'createdby_id' => null,
'updatedby_id' => null,
'deletedby_id' => null,
'operator_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'item_id' => 'item_id',
'combination_id' => 'combination_id',
'raw_material_id' => 'raw_material_id',
'entry_type' => 'entry_type',
'name' => 'name',
'barcode' => 'barcode',
'code' => 'code',
'options_values' => 'options_values',
'combination' => 'combination',
'supplier_id' => 'supplier_id',
'supplier_name' => 'supplier_name',
'supplier_order' => 'supplier_order',
'sale_id' => 'sale_id',
'quantity' => 'quantity',
'unit' => 'unit',
'type' => 'type',
'load_cause' => 'load_cause',
'unload_cause' => 'unload_cause',
'operator_id' => 'operator_id',
'operator_username' => 'operator_username',
'operator_fullname' => 'operator_fullname',
'date' => 'date',
'notes' => 'notes',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'deleted_at' => 'deleted_at',
'createdby_id' => 'createdby_id',
'updatedby_id' => 'updatedby_id',
'deletedby_id' => 'deletedby_id',
'operator_name' => 'operator_name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'item_id' => 'setItemId',
'combination_id' => 'setCombinationId',
'raw_material_id' => 'setRawMaterialId',
'entry_type' => 'setEntryType',
'name' => 'setName',
'barcode' => 'setBarcode',
'code' => 'setCode',
'options_values' => 'setOptionsValues',
'combination' => 'setCombination',
'supplier_id' => 'setSupplierId',
'supplier_name' => 'setSupplierName',
'supplier_order' => 'setSupplierOrder',
'sale_id' => 'setSaleId',
'quantity' => 'setQuantity',
'unit' => 'setUnit',
'type' => 'setType',
'load_cause' => 'setLoadCause',
'unload_cause' => 'setUnloadCause',
'operator_id' => 'setOperatorId',
'operator_username' => 'setOperatorUsername',
'operator_fullname' => 'setOperatorFullname',
'date' => 'setDate',
'notes' => 'setNotes',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'deleted_at' => 'setDeletedAt',
'createdby_id' => 'setCreatedbyId',
'updatedby_id' => 'setUpdatedbyId',
'deletedby_id' => 'setDeletedbyId',
'operator_name' => 'setOperatorName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'item_id' => 'getItemId',
'combination_id' => 'getCombinationId',
'raw_material_id' => 'getRawMaterialId',
'entry_type' => 'getEntryType',
'name' => 'getName',
'barcode' => 'getBarcode',
'code' => 'getCode',
'options_values' => 'getOptionsValues',
'combination' => 'getCombination',
'supplier_id' => 'getSupplierId',
'supplier_name' => 'getSupplierName',
'supplier_order' => 'getSupplierOrder',
'sale_id' => 'getSaleId',
'quantity' => 'getQuantity',
'unit' => 'getUnit',
'type' => 'getType',
'load_cause' => 'getLoadCause',
'unload_cause' => 'getUnloadCause',
'operator_id' => 'getOperatorId',
'operator_username' => 'getOperatorUsername',
'operator_fullname' => 'getOperatorFullname',
'date' => 'getDate',
'notes' => 'getNotes',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'deleted_at' => 'getDeletedAt',
'createdby_id' => 'getCreatedbyId',
'updatedby_id' => 'getUpdatedbyId',
'deletedby_id' => 'getDeletedbyId',
'operator_name' => 'getOperatorName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['combination_id'] = isset($data['combination_id']) ? $data['combination_id'] : null;
        $this->container['raw_material_id'] = isset($data['raw_material_id']) ? $data['raw_material_id'] : null;
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['options_values'] = isset($data['options_values']) ? $data['options_values'] : null;
        $this->container['combination'] = isset($data['combination']) ? $data['combination'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['supplier_order'] = isset($data['supplier_order']) ? $data['supplier_order'] : null;
        $this->container['sale_id'] = isset($data['sale_id']) ? $data['sale_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['load_cause'] = isset($data['load_cause']) ? $data['load_cause'] : null;
        $this->container['unload_cause'] = isset($data['unload_cause']) ? $data['unload_cause'] : null;
        $this->container['operator_id'] = isset($data['operator_id']) ? $data['operator_id'] : null;
        $this->container['operator_username'] = isset($data['operator_username']) ? $data['operator_username'] : null;
        $this->container['operator_fullname'] = isset($data['operator_fullname']) ? $data['operator_fullname'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['createdby_id'] = isset($data['createdby_id']) ? $data['createdby_id'] : null;
        $this->container['updatedby_id'] = isset($data['updatedby_id']) ? $data['updatedby_id'] : null;
        $this->container['deletedby_id'] = isset($data['deletedby_id']) ? $data['deletedby_id'] : null;
        $this->container['operator_name'] = isset($data['operator_name']) ? $data['operator_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entry_type'] === null) {
            $invalidProperties[] = "'entry_type' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets combination_id
     *
     * @return int
     */
    public function getCombinationId()
    {
        return $this->container['combination_id'];
    }

    /**
     * Sets combination_id
     *
     * @param int $combination_id combination_id
     *
     * @return $this
     */
    public function setCombinationId($combination_id)
    {
        $this->container['combination_id'] = $combination_id;

        return $this;
    }

    /**
     * Gets raw_material_id
     *
     * @return int
     */
    public function getRawMaterialId()
    {
        return $this->container['raw_material_id'];
    }

    /**
     * Sets raw_material_id
     *
     * @param int $raw_material_id raw_material_id
     *
     * @return $this
     */
    public function setRawMaterialId($raw_material_id)
    {
        $this->container['raw_material_id'] = $raw_material_id;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return string
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param string $entry_type entry_type
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets options_values
     *
     * @return string
     */
    public function getOptionsValues()
    {
        return $this->container['options_values'];
    }

    /**
     * Sets options_values
     *
     * @param string $options_values options_values
     *
     * @return $this
     */
    public function setOptionsValues($options_values)
    {
        $this->container['options_values'] = $options_values;

        return $this;
    }

    /**
     * Gets combination
     *
     * @return string
     */
    public function getCombination()
    {
        return $this->container['combination'];
    }

    /**
     * Sets combination
     *
     * @param string $combination combination
     *
     * @return $this
     */
    public function setCombination($combination)
    {
        $this->container['combination'] = $combination;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param int $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name supplier_name
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets supplier_order
     *
     * @return string
     */
    public function getSupplierOrder()
    {
        return $this->container['supplier_order'];
    }

    /**
     * Sets supplier_order
     *
     * @param string $supplier_order supplier_order
     *
     * @return $this
     */
    public function setSupplierOrder($supplier_order)
    {
        $this->container['supplier_order'] = $supplier_order;

        return $this;
    }

    /**
     * Gets sale_id
     *
     * @return int
     */
    public function getSaleId()
    {
        return $this->container['sale_id'];
    }

    /**
     * Sets sale_id
     *
     * @param int $sale_id sale_id
     *
     * @return $this
     */
    public function setSaleId($sale_id)
    {
        $this->container['sale_id'] = $sale_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets load_cause
     *
     * @return string
     */
    public function getLoadCause()
    {
        return $this->container['load_cause'];
    }

    /**
     * Sets load_cause
     *
     * @param string $load_cause load_cause
     *
     * @return $this
     */
    public function setLoadCause($load_cause)
    {
        $this->container['load_cause'] = $load_cause;

        return $this;
    }

    /**
     * Gets unload_cause
     *
     * @return string
     */
    public function getUnloadCause()
    {
        return $this->container['unload_cause'];
    }

    /**
     * Sets unload_cause
     *
     * @param string $unload_cause unload_cause
     *
     * @return $this
     */
    public function setUnloadCause($unload_cause)
    {
        $this->container['unload_cause'] = $unload_cause;

        return $this;
    }

    /**
     * Gets operator_id
     *
     * @return int
     */
    public function getOperatorId()
    {
        return $this->container['operator_id'];
    }

    /**
     * Sets operator_id
     *
     * @param int $operator_id operator_id
     *
     * @return $this
     */
    public function setOperatorId($operator_id)
    {
        $this->container['operator_id'] = $operator_id;

        return $this;
    }

    /**
     * Gets operator_username
     *
     * @return string
     */
    public function getOperatorUsername()
    {
        return $this->container['operator_username'];
    }

    /**
     * Sets operator_username
     *
     * @param string $operator_username operator_username
     *
     * @return $this
     */
    public function setOperatorUsername($operator_username)
    {
        $this->container['operator_username'] = $operator_username;

        return $this;
    }

    /**
     * Gets operator_fullname
     *
     * @return string
     */
    public function getOperatorFullname()
    {
        return $this->container['operator_fullname'];
    }

    /**
     * Sets operator_fullname
     *
     * @param string $operator_fullname operator_fullname
     *
     * @return $this
     */
    public function setOperatorFullname($operator_fullname)
    {
        $this->container['operator_fullname'] = $operator_fullname;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets createdby_id
     *
     * @return int
     */
    public function getCreatedbyId()
    {
        return $this->container['createdby_id'];
    }

    /**
     * Sets createdby_id
     *
     * @param int $createdby_id createdby_id
     *
     * @return $this
     */
    public function setCreatedbyId($createdby_id)
    {
        $this->container['createdby_id'] = $createdby_id;

        return $this;
    }

    /**
     * Gets updatedby_id
     *
     * @return int
     */
    public function getUpdatedbyId()
    {
        return $this->container['updatedby_id'];
    }

    /**
     * Sets updatedby_id
     *
     * @param int $updatedby_id updatedby_id
     *
     * @return $this
     */
    public function setUpdatedbyId($updatedby_id)
    {
        $this->container['updatedby_id'] = $updatedby_id;

        return $this;
    }

    /**
     * Gets deletedby_id
     *
     * @return int
     */
    public function getDeletedbyId()
    {
        return $this->container['deletedby_id'];
    }

    /**
     * Sets deletedby_id
     *
     * @param int $deletedby_id deletedby_id
     *
     * @return $this
     */
    public function setDeletedbyId($deletedby_id)
    {
        $this->container['deletedby_id'] = $deletedby_id;

        return $this;
    }

    /**
     * Gets operator_name
     *
     * @return object
     */
    public function getOperatorName()
    {
        return $this->container['operator_name'];
    }

    /**
     * Sets operator_name
     *
     * @param object $operator_name operator_name
     *
     * @return $this
     */
    public function setOperatorName($operator_name)
    {
        $this->container['operator_name'] = $operator_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
