<?php
/**
 * ChainPrepaidMovements
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scloby Api
 *
 * <a href='https://developer.scloby.com/apidoc/assets/documentation.json' target='_blank'>https://developer.scloby.com/apidoc/assets/documentation.json</a>  **Introduction**  **The authentication token is issued via Oauth2 standard ( https://oauth.net)**    You can apply for a Scloby test account on our developer portal **https://developer.scloby.com**   Here is your **ClientId** and **ClientSecret** for tests:    **client_id**: SclobyApiDocs    **client_secret**: DdyPNPvfPOGa0Izjct0C   **All data is JSON format, and the Content-Type header of POST/PUT request must be set to application/json.**  **Search Parameters**  You can perform a search in a collection using all first level properties in combination with some parameter, or specifying a value:    property = VALUE if you are searching for all items with a specific property value    property_since = MIN_VALUE if you are searching for all items with property value greater (or equal) than MIN_VALUE     property_max   = MAX_VALUE if you are searching for all items with property value smaller (or equal)than MAX_VALUE   property_like  = LIKE_VALUE if you are searching for a substring content.   You can use property_since and property_max in order to simulate **between** operator If you are using *equal* operator, all other operators for that parameter *will be ingnored*   If you are using _max or _since operator in strings, the alphabetical ordering will be used
 *
 * OpenAPI spec version: 2.0.0
 * Contact: dev@scloby.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChainPrepaidMovements Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChainPrepaidMovements implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'chain_prepaid_movements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'customer_uuid' => 'string',
'previous_id' => 'int',
'shop_uuid' => 'string',
'valid_from' => '\DateTime',
'valid_to' => '\DateTime',
'credit' => 'float',
'ticket_credit' => 'float',
'movement_type_id' => 'int',
'sale_uuid' => 'string',
'notes' => 'string',
'createdby_id' => 'int',
'amount' => 'object',
'ticket_amount' => 'object',
'movement_type' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'customer_uuid' => null,
'previous_id' => null,
'shop_uuid' => null,
'valid_from' => 'date-time',
'valid_to' => 'date-time',
'credit' => null,
'ticket_credit' => null,
'movement_type_id' => null,
'sale_uuid' => null,
'notes' => null,
'createdby_id' => null,
'amount' => null,
'ticket_amount' => null,
'movement_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'customer_uuid' => 'customer_uuid',
'previous_id' => 'previous_id',
'shop_uuid' => 'shop_uuid',
'valid_from' => 'valid_from',
'valid_to' => 'valid_to',
'credit' => 'credit',
'ticket_credit' => 'ticket_credit',
'movement_type_id' => 'movement_type_id',
'sale_uuid' => 'sale_uuid',
'notes' => 'notes',
'createdby_id' => 'createdby_id',
'amount' => 'amount',
'ticket_amount' => 'ticket_amount',
'movement_type' => 'movement_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'customer_uuid' => 'setCustomerUuid',
'previous_id' => 'setPreviousId',
'shop_uuid' => 'setShopUuid',
'valid_from' => 'setValidFrom',
'valid_to' => 'setValidTo',
'credit' => 'setCredit',
'ticket_credit' => 'setTicketCredit',
'movement_type_id' => 'setMovementTypeId',
'sale_uuid' => 'setSaleUuid',
'notes' => 'setNotes',
'createdby_id' => 'setCreatedbyId',
'amount' => 'setAmount',
'ticket_amount' => 'setTicketAmount',
'movement_type' => 'setMovementType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'customer_uuid' => 'getCustomerUuid',
'previous_id' => 'getPreviousId',
'shop_uuid' => 'getShopUuid',
'valid_from' => 'getValidFrom',
'valid_to' => 'getValidTo',
'credit' => 'getCredit',
'ticket_credit' => 'getTicketCredit',
'movement_type_id' => 'getMovementTypeId',
'sale_uuid' => 'getSaleUuid',
'notes' => 'getNotes',
'createdby_id' => 'getCreatedbyId',
'amount' => 'getAmount',
'ticket_amount' => 'getTicketAmount',
'movement_type' => 'getMovementType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer_uuid'] = isset($data['customer_uuid']) ? $data['customer_uuid'] : null;
        $this->container['previous_id'] = isset($data['previous_id']) ? $data['previous_id'] : null;
        $this->container['shop_uuid'] = isset($data['shop_uuid']) ? $data['shop_uuid'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['ticket_credit'] = isset($data['ticket_credit']) ? $data['ticket_credit'] : null;
        $this->container['movement_type_id'] = isset($data['movement_type_id']) ? $data['movement_type_id'] : null;
        $this->container['sale_uuid'] = isset($data['sale_uuid']) ? $data['sale_uuid'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['createdby_id'] = isset($data['createdby_id']) ? $data['createdby_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['ticket_amount'] = isset($data['ticket_amount']) ? $data['ticket_amount'] : null;
        $this->container['movement_type'] = isset($data['movement_type']) ? $data['movement_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_uuid'] === null) {
            $invalidProperties[] = "'customer_uuid' can't be null";
        }
        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        if ($this->container['credit'] === null) {
            $invalidProperties[] = "'credit' can't be null";
        }
        if ($this->container['ticket_credit'] === null) {
            $invalidProperties[] = "'ticket_credit' can't be null";
        }
        if ($this->container['movement_type_id'] === null) {
            $invalidProperties[] = "'movement_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_uuid
     *
     * @return string
     */
    public function getCustomerUuid()
    {
        return $this->container['customer_uuid'];
    }

    /**
     * Sets customer_uuid
     *
     * @param string $customer_uuid customer_uuid
     *
     * @return $this
     */
    public function setCustomerUuid($customer_uuid)
    {
        $this->container['customer_uuid'] = $customer_uuid;

        return $this;
    }

    /**
     * Gets previous_id
     *
     * @return int
     */
    public function getPreviousId()
    {
        return $this->container['previous_id'];
    }

    /**
     * Sets previous_id
     *
     * @param int $previous_id previous_id
     *
     * @return $this
     */
    public function setPreviousId($previous_id)
    {
        $this->container['previous_id'] = $previous_id;

        return $this;
    }

    /**
     * Gets shop_uuid
     *
     * @return string
     */
    public function getShopUuid()
    {
        return $this->container['shop_uuid'];
    }

    /**
     * Sets shop_uuid
     *
     * @param string $shop_uuid shop_uuid
     *
     * @return $this
     */
    public function setShopUuid($shop_uuid)
    {
        $this->container['shop_uuid'] = $shop_uuid;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return float
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param float $credit credit
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets ticket_credit
     *
     * @return float
     */
    public function getTicketCredit()
    {
        return $this->container['ticket_credit'];
    }

    /**
     * Sets ticket_credit
     *
     * @param float $ticket_credit ticket_credit
     *
     * @return $this
     */
    public function setTicketCredit($ticket_credit)
    {
        $this->container['ticket_credit'] = $ticket_credit;

        return $this;
    }

    /**
     * Gets movement_type_id
     *
     * @return int
     */
    public function getMovementTypeId()
    {
        return $this->container['movement_type_id'];
    }

    /**
     * Sets movement_type_id
     *
     * @param int $movement_type_id movement_type_id
     *
     * @return $this
     */
    public function setMovementTypeId($movement_type_id)
    {
        $this->container['movement_type_id'] = $movement_type_id;

        return $this;
    }

    /**
     * Gets sale_uuid
     *
     * @return string
     */
    public function getSaleUuid()
    {
        return $this->container['sale_uuid'];
    }

    /**
     * Sets sale_uuid
     *
     * @param string $sale_uuid sale_uuid
     *
     * @return $this
     */
    public function setSaleUuid($sale_uuid)
    {
        $this->container['sale_uuid'] = $sale_uuid;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets createdby_id
     *
     * @return int
     */
    public function getCreatedbyId()
    {
        return $this->container['createdby_id'];
    }

    /**
     * Sets createdby_id
     *
     * @param int $createdby_id createdby_id
     *
     * @return $this
     */
    public function setCreatedbyId($createdby_id)
    {
        $this->container['createdby_id'] = $createdby_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return object
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param object $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets ticket_amount
     *
     * @return object
     */
    public function getTicketAmount()
    {
        return $this->container['ticket_amount'];
    }

    /**
     * Sets ticket_amount
     *
     * @param object $ticket_amount ticket_amount
     *
     * @return $this
     */
    public function setTicketAmount($ticket_amount)
    {
        $this->container['ticket_amount'] = $ticket_amount;

        return $this;
    }

    /**
     * Gets movement_type
     *
     * @return object
     */
    public function getMovementType()
    {
        return $this->container['movement_type'];
    }

    /**
     * Sets movement_type
     *
     * @param object $movement_type movement_type
     *
     * @return $this
     */
    public function setMovementType($movement_type)
    {
        $this->container['movement_type'] = $movement_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
