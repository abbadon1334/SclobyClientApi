<?php
/**
 * SaleitemSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scloby Api
 *
 * <a href='https://developer.scloby.com/apidoc/assets/documentation.json' target='_blank'>https://developer.scloby.com/apidoc/assets/documentation.json</a>  **Introduction**  **The authentication token is issued via Oauth2 standard ( https://oauth.net)**    You can apply for a Scloby test account on our developer portal **https://developer.scloby.com**   Here is your **ClientId** and **ClientSecret** for tests:    **client_id**: SclobyApiDocs    **client_secret**: DdyPNPvfPOGa0Izjct0C   **All data is JSON format, and the Content-Type header of POST/PUT request must be set to application/json.**  **Search Parameters**  You can perform a search in a collection using all first level properties in combination with some parameter, or specifying a value:    property = VALUE if you are searching for all items with a specific property value    property_since = MIN_VALUE if you are searching for all items with property value greater (or equal) than MIN_VALUE     property_max   = MAX_VALUE if you are searching for all items with property value smaller (or equal)than MAX_VALUE   property_like  = LIKE_VALUE if you are searching for a substring content.   You can use property_since and property_max in order to simulate **between** operator If you are using *equal* operator, all other operators for that parameter *will be ingnored*   If you are using _max or _since operator in strings, the alphabetical ordering will be used
 *
 * OpenAPI spec version: 2.0.0
 * Contact: dev@scloby.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SaleitemSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaleitemSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Saleitem schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'external_id' => 'string',
'sale_id' => 'int',
'reference_sequential_number' => 'int',
'reference_text' => 'string',
'reference_date' => '\DateTime',
'uuid' => 'string',
'item_id' => 'int',
'combination_id' => 'int',
'prize_id' => 'int',
'type' => 'string',
'refund_cause_id' => 'int',
'refund_cause_description' => 'string',
'name' => 'string',
'barcode' => 'string',
'sku' => 'string',
'notes' => 'string',
'not_discountable' => 'bool',
'price' => 'float',
'cost' => 'float',
'vat_perc' => 'float',
'final_price' => 'float',
'final_net_price' => 'float',
'quantity' => 'float',
'lastupdate_at' => '\DateTime',
'lastupdate_by' => 'int',
'added_at' => '\DateTime',
'seller_id' => 'int',
'seller_name' => 'string',
'category_id' => 'int',
'category_name' => 'string',
'department_id' => 'int',
'department_name' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'deleted_at' => '\DateTime',
'price_changes' => '\Swagger\Client\Model\PricechangeSchema[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'external_id' => null,
'sale_id' => null,
'reference_sequential_number' => null,
'reference_text' => null,
'reference_date' => 'date-time',
'uuid' => null,
'item_id' => null,
'combination_id' => null,
'prize_id' => null,
'type' => null,
'refund_cause_id' => null,
'refund_cause_description' => null,
'name' => null,
'barcode' => null,
'sku' => null,
'notes' => null,
'not_discountable' => null,
'price' => null,
'cost' => null,
'vat_perc' => null,
'final_price' => null,
'final_net_price' => null,
'quantity' => null,
'lastupdate_at' => 'date-time',
'lastupdate_by' => null,
'added_at' => 'date-time',
'seller_id' => null,
'seller_name' => null,
'category_id' => null,
'category_name' => null,
'department_id' => null,
'department_name' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'deleted_at' => 'date-time',
'price_changes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'external_id' => 'external_id',
'sale_id' => 'sale_id',
'reference_sequential_number' => 'reference_sequential_number',
'reference_text' => 'reference_text',
'reference_date' => 'reference_date',
'uuid' => 'uuid',
'item_id' => 'item_id',
'combination_id' => 'combination_id',
'prize_id' => 'prize_id',
'type' => 'type',
'refund_cause_id' => 'refund_cause_id',
'refund_cause_description' => 'refund_cause_description',
'name' => 'name',
'barcode' => 'barcode',
'sku' => 'sku',
'notes' => 'notes',
'not_discountable' => 'not_discountable',
'price' => 'price',
'cost' => 'cost',
'vat_perc' => 'vat_perc',
'final_price' => 'final_price',
'final_net_price' => 'final_net_price',
'quantity' => 'quantity',
'lastupdate_at' => 'lastupdate_at',
'lastupdate_by' => 'lastupdate_by',
'added_at' => 'added_at',
'seller_id' => 'seller_id',
'seller_name' => 'seller_name',
'category_id' => 'category_id',
'category_name' => 'category_name',
'department_id' => 'department_id',
'department_name' => 'department_name',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'deleted_at' => 'deleted_at',
'price_changes' => 'price_changes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'external_id' => 'setExternalId',
'sale_id' => 'setSaleId',
'reference_sequential_number' => 'setReferenceSequentialNumber',
'reference_text' => 'setReferenceText',
'reference_date' => 'setReferenceDate',
'uuid' => 'setUuid',
'item_id' => 'setItemId',
'combination_id' => 'setCombinationId',
'prize_id' => 'setPrizeId',
'type' => 'setType',
'refund_cause_id' => 'setRefundCauseId',
'refund_cause_description' => 'setRefundCauseDescription',
'name' => 'setName',
'barcode' => 'setBarcode',
'sku' => 'setSku',
'notes' => 'setNotes',
'not_discountable' => 'setNotDiscountable',
'price' => 'setPrice',
'cost' => 'setCost',
'vat_perc' => 'setVatPerc',
'final_price' => 'setFinalPrice',
'final_net_price' => 'setFinalNetPrice',
'quantity' => 'setQuantity',
'lastupdate_at' => 'setLastupdateAt',
'lastupdate_by' => 'setLastupdateBy',
'added_at' => 'setAddedAt',
'seller_id' => 'setSellerId',
'seller_name' => 'setSellerName',
'category_id' => 'setCategoryId',
'category_name' => 'setCategoryName',
'department_id' => 'setDepartmentId',
'department_name' => 'setDepartmentName',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'deleted_at' => 'setDeletedAt',
'price_changes' => 'setPriceChanges'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'external_id' => 'getExternalId',
'sale_id' => 'getSaleId',
'reference_sequential_number' => 'getReferenceSequentialNumber',
'reference_text' => 'getReferenceText',
'reference_date' => 'getReferenceDate',
'uuid' => 'getUuid',
'item_id' => 'getItemId',
'combination_id' => 'getCombinationId',
'prize_id' => 'getPrizeId',
'type' => 'getType',
'refund_cause_id' => 'getRefundCauseId',
'refund_cause_description' => 'getRefundCauseDescription',
'name' => 'getName',
'barcode' => 'getBarcode',
'sku' => 'getSku',
'notes' => 'getNotes',
'not_discountable' => 'getNotDiscountable',
'price' => 'getPrice',
'cost' => 'getCost',
'vat_perc' => 'getVatPerc',
'final_price' => 'getFinalPrice',
'final_net_price' => 'getFinalNetPrice',
'quantity' => 'getQuantity',
'lastupdate_at' => 'getLastupdateAt',
'lastupdate_by' => 'getLastupdateBy',
'added_at' => 'getAddedAt',
'seller_id' => 'getSellerId',
'seller_name' => 'getSellerName',
'category_id' => 'getCategoryId',
'category_name' => 'getCategoryName',
'department_id' => 'getDepartmentId',
'department_name' => 'getDepartmentName',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'deleted_at' => 'getDeletedAt',
'price_changes' => 'getPriceChanges'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['sale_id'] = isset($data['sale_id']) ? $data['sale_id'] : null;
        $this->container['reference_sequential_number'] = isset($data['reference_sequential_number']) ? $data['reference_sequential_number'] : null;
        $this->container['reference_text'] = isset($data['reference_text']) ? $data['reference_text'] : null;
        $this->container['reference_date'] = isset($data['reference_date']) ? $data['reference_date'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['combination_id'] = isset($data['combination_id']) ? $data['combination_id'] : null;
        $this->container['prize_id'] = isset($data['prize_id']) ? $data['prize_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['refund_cause_id'] = isset($data['refund_cause_id']) ? $data['refund_cause_id'] : null;
        $this->container['refund_cause_description'] = isset($data['refund_cause_description']) ? $data['refund_cause_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['not_discountable'] = isset($data['not_discountable']) ? $data['not_discountable'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['vat_perc'] = isset($data['vat_perc']) ? $data['vat_perc'] : null;
        $this->container['final_price'] = isset($data['final_price']) ? $data['final_price'] : null;
        $this->container['final_net_price'] = isset($data['final_net_price']) ? $data['final_net_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['lastupdate_at'] = isset($data['lastupdate_at']) ? $data['lastupdate_at'] : null;
        $this->container['lastupdate_by'] = isset($data['lastupdate_by']) ? $data['lastupdate_by'] : null;
        $this->container['added_at'] = isset($data['added_at']) ? $data['added_at'] : null;
        $this->container['seller_id'] = isset($data['seller_id']) ? $data['seller_id'] : null;
        $this->container['seller_name'] = isset($data['seller_name']) ? $data['seller_name'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['category_name'] = isset($data['category_name']) ? $data['category_name'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['department_name'] = isset($data['department_name']) ? $data['department_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['price_changes'] = isset($data['price_changes']) ? $data['price_changes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['vat_perc'] === null) {
            $invalidProperties[] = "'vat_perc' can't be null";
        }
        if ($this->container['final_price'] === null) {
            $invalidProperties[] = "'final_price' can't be null";
        }
        if ($this->container['final_net_price'] === null) {
            $invalidProperties[] = "'final_net_price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['seller_id'] === null) {
            $invalidProperties[] = "'seller_id' can't be null";
        }
        if ($this->container['seller_name'] === null) {
            $invalidProperties[] = "'seller_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets sale_id
     *
     * @return int
     */
    public function getSaleId()
    {
        return $this->container['sale_id'];
    }

    /**
     * Sets sale_id
     *
     * @param int $sale_id sale_id
     *
     * @return $this
     */
    public function setSaleId($sale_id)
    {
        $this->container['sale_id'] = $sale_id;

        return $this;
    }

    /**
     * Gets reference_sequential_number
     *
     * @return int
     */
    public function getReferenceSequentialNumber()
    {
        return $this->container['reference_sequential_number'];
    }

    /**
     * Sets reference_sequential_number
     *
     * @param int $reference_sequential_number reference_sequential_number
     *
     * @return $this
     */
    public function setReferenceSequentialNumber($reference_sequential_number)
    {
        $this->container['reference_sequential_number'] = $reference_sequential_number;

        return $this;
    }

    /**
     * Gets reference_text
     *
     * @return string
     */
    public function getReferenceText()
    {
        return $this->container['reference_text'];
    }

    /**
     * Sets reference_text
     *
     * @param string $reference_text reference_text
     *
     * @return $this
     */
    public function setReferenceText($reference_text)
    {
        $this->container['reference_text'] = $reference_text;

        return $this;
    }

    /**
     * Gets reference_date
     *
     * @return \DateTime
     */
    public function getReferenceDate()
    {
        return $this->container['reference_date'];
    }

    /**
     * Sets reference_date
     *
     * @param \DateTime $reference_date reference_date
     *
     * @return $this
     */
    public function setReferenceDate($reference_date)
    {
        $this->container['reference_date'] = $reference_date;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets combination_id
     *
     * @return int
     */
    public function getCombinationId()
    {
        return $this->container['combination_id'];
    }

    /**
     * Sets combination_id
     *
     * @param int $combination_id combination_id
     *
     * @return $this
     */
    public function setCombinationId($combination_id)
    {
        $this->container['combination_id'] = $combination_id;

        return $this;
    }

    /**
     * Gets prize_id
     *
     * @return int
     */
    public function getPrizeId()
    {
        return $this->container['prize_id'];
    }

    /**
     * Sets prize_id
     *
     * @param int $prize_id prize_id
     *
     * @return $this
     */
    public function setPrizeId($prize_id)
    {
        $this->container['prize_id'] = $prize_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets refund_cause_id
     *
     * @return int
     */
    public function getRefundCauseId()
    {
        return $this->container['refund_cause_id'];
    }

    /**
     * Sets refund_cause_id
     *
     * @param int $refund_cause_id refund_cause_id
     *
     * @return $this
     */
    public function setRefundCauseId($refund_cause_id)
    {
        $this->container['refund_cause_id'] = $refund_cause_id;

        return $this;
    }

    /**
     * Gets refund_cause_description
     *
     * @return string
     */
    public function getRefundCauseDescription()
    {
        return $this->container['refund_cause_description'];
    }

    /**
     * Sets refund_cause_description
     *
     * @param string $refund_cause_description refund_cause_description
     *
     * @return $this
     */
    public function setRefundCauseDescription($refund_cause_description)
    {
        $this->container['refund_cause_description'] = $refund_cause_description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of item sold
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets not_discountable
     *
     * @return bool
     */
    public function getNotDiscountable()
    {
        return $this->container['not_discountable'];
    }

    /**
     * Sets not_discountable
     *
     * @param bool $not_discountable not_discountable
     *
     * @return $this
     */
    public function setNotDiscountable($not_discountable)
    {
        $this->container['not_discountable'] = $not_discountable;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets vat_perc
     *
     * @return float
     */
    public function getVatPerc()
    {
        return $this->container['vat_perc'];
    }

    /**
     * Sets vat_perc
     *
     * @param float $vat_perc vat_perc
     *
     * @return $this
     */
    public function setVatPerc($vat_perc)
    {
        $this->container['vat_perc'] = $vat_perc;

        return $this;
    }

    /**
     * Gets final_price
     *
     * @return float
     */
    public function getFinalPrice()
    {
        return $this->container['final_price'];
    }

    /**
     * Sets final_price
     *
     * @param float $final_price Unit Price  + discount/surcharges
     *
     * @return $this
     */
    public function setFinalPrice($final_price)
    {
        $this->container['final_price'] = $final_price;

        return $this;
    }

    /**
     * Gets final_net_price
     *
     * @return float
     */
    public function getFinalNetPrice()
    {
        return $this->container['final_net_price'];
    }

    /**
     * Sets final_net_price
     *
     * @param float $final_net_price Final Price without VAT
     *
     * @return $this
     */
    public function setFinalNetPrice($final_net_price)
    {
        $this->container['final_net_price'] = $final_net_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets lastupdate_at
     *
     * @return \DateTime
     */
    public function getLastupdateAt()
    {
        return $this->container['lastupdate_at'];
    }

    /**
     * Sets lastupdate_at
     *
     * @param \DateTime $lastupdate_at lastupdate_at
     *
     * @return $this
     */
    public function setLastupdateAt($lastupdate_at)
    {
        $this->container['lastupdate_at'] = $lastupdate_at;

        return $this;
    }

    /**
     * Gets lastupdate_by
     *
     * @return int
     */
    public function getLastupdateBy()
    {
        return $this->container['lastupdate_by'];
    }

    /**
     * Sets lastupdate_by
     *
     * @param int $lastupdate_by lastupdate_by
     *
     * @return $this
     */
    public function setLastupdateBy($lastupdate_by)
    {
        $this->container['lastupdate_by'] = $lastupdate_by;

        return $this;
    }

    /**
     * Gets added_at
     *
     * @return \DateTime
     */
    public function getAddedAt()
    {
        return $this->container['added_at'];
    }

    /**
     * Sets added_at
     *
     * @param \DateTime $added_at added_at
     *
     * @return $this
     */
    public function setAddedAt($added_at)
    {
        $this->container['added_at'] = $added_at;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return int
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param int $seller_id seller_id
     *
     * @return $this
     */
    public function setSellerId($seller_id)
    {
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets seller_name
     *
     * @return string
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     *
     * @param string $seller_name seller_name
     *
     * @return $this
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string $category_name category_name
     *
     * @return $this
     */
    public function setCategoryName($category_name)
    {
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return int
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param int $department_id department_id
     *
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets department_name
     *
     * @return string
     */
    public function getDepartmentName()
    {
        return $this->container['department_name'];
    }

    /**
     * Sets department_name
     *
     * @param string $department_name department_name
     *
     * @return $this
     */
    public function setDepartmentName($department_name)
    {
        $this->container['department_name'] = $department_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets price_changes
     *
     * @return \Swagger\Client\Model\PricechangeSchema[]
     */
    public function getPriceChanges()
    {
        return $this->container['price_changes'];
    }

    /**
     * Sets price_changes
     *
     * @param \Swagger\Client\Model\PricechangeSchema[] $price_changes price_changes
     *
     * @return $this
     */
    public function setPriceChanges($price_changes)
    {
        $this->container['price_changes'] = $price_changes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
