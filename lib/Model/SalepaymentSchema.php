<?php
/**
 * SalepaymentSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scloby Api
 *
 * <a href='https://developer.scloby.com/apidoc/assets/documentation.json' target='_blank'>https://developer.scloby.com/apidoc/assets/documentation.json</a>  **Introduction**  **The authentication token is issued via Oauth2 standard ( https://oauth.net)**    You can apply for a Scloby test account on our developer portal **https://developer.scloby.com**   Here is your **ClientId** and **ClientSecret** for tests:    **client_id**: SclobyApiDocs    **client_secret**: DdyPNPvfPOGa0Izjct0C   **All data is JSON format, and the Content-Type header of POST/PUT request must be set to application/json.**  **Search Parameters**  You can perform a search in a collection using all first level properties in combination with some parameter, or specifying a value:    property = VALUE if you are searching for all items with a specific property value    property_since = MIN_VALUE if you are searching for all items with property value greater (or equal) than MIN_VALUE     property_max   = MAX_VALUE if you are searching for all items with property value smaller (or equal)than MAX_VALUE   property_like  = LIKE_VALUE if you are searching for a substring content.   You can use property_since and property_max in order to simulate **between** operator If you are using *equal* operator, all other operators for that parameter *will be ingnored*   If you are using _max or _since operator in strings, the alphabetical ordering will be used
 *
 * OpenAPI spec version: 2.0.0
 * Contact: dev@scloby.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalepaymentSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalepaymentSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Salepayment schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'sale_id' => 'int',
'payment_method_id' => 'int',
'payment_method_name' => 'string',
'payment_method_type_id' => 'int',
'payment_method_type_name' => 'string',
'unclaimed' => 'bool',
'amount' => 'float',
'paid' => 'bool',
'date' => '\DateTime',
'acquirer_name' => 'string',
'acquirer_id' => 'int',
'payment_data' => 'string',
'trx' => 'string',
'calltrx' => 'string',
'card_circuit_id' => 'int',
'card_circuit_name' => 'string',
'ticket_circuit' => 'string',
'ticket_name' => 'string',
'ticket_id' => 'int',
'code' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'deleted_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'sale_id' => null,
'payment_method_id' => null,
'payment_method_name' => null,
'payment_method_type_id' => null,
'payment_method_type_name' => null,
'unclaimed' => null,
'amount' => null,
'paid' => null,
'date' => 'date-time',
'acquirer_name' => null,
'acquirer_id' => null,
'payment_data' => null,
'trx' => null,
'calltrx' => null,
'card_circuit_id' => null,
'card_circuit_name' => null,
'ticket_circuit' => null,
'ticket_name' => null,
'ticket_id' => null,
'code' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'deleted_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'sale_id' => 'sale_id',
'payment_method_id' => 'payment_method_id',
'payment_method_name' => 'payment_method_name',
'payment_method_type_id' => 'payment_method_type_id',
'payment_method_type_name' => 'payment_method_type_name',
'unclaimed' => 'unclaimed',
'amount' => 'amount',
'paid' => 'paid',
'date' => 'date',
'acquirer_name' => 'acquirer_name',
'acquirer_id' => 'acquirer_id',
'payment_data' => 'payment_data',
'trx' => 'trx',
'calltrx' => 'calltrx',
'card_circuit_id' => 'card_circuit_id',
'card_circuit_name' => 'card_circuit_name',
'ticket_circuit' => 'ticket_circuit',
'ticket_name' => 'ticket_name',
'ticket_id' => 'ticket_id',
'code' => 'code',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'deleted_at' => 'deleted_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'sale_id' => 'setSaleId',
'payment_method_id' => 'setPaymentMethodId',
'payment_method_name' => 'setPaymentMethodName',
'payment_method_type_id' => 'setPaymentMethodTypeId',
'payment_method_type_name' => 'setPaymentMethodTypeName',
'unclaimed' => 'setUnclaimed',
'amount' => 'setAmount',
'paid' => 'setPaid',
'date' => 'setDate',
'acquirer_name' => 'setAcquirerName',
'acquirer_id' => 'setAcquirerId',
'payment_data' => 'setPaymentData',
'trx' => 'setTrx',
'calltrx' => 'setCalltrx',
'card_circuit_id' => 'setCardCircuitId',
'card_circuit_name' => 'setCardCircuitName',
'ticket_circuit' => 'setTicketCircuit',
'ticket_name' => 'setTicketName',
'ticket_id' => 'setTicketId',
'code' => 'setCode',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'deleted_at' => 'setDeletedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'sale_id' => 'getSaleId',
'payment_method_id' => 'getPaymentMethodId',
'payment_method_name' => 'getPaymentMethodName',
'payment_method_type_id' => 'getPaymentMethodTypeId',
'payment_method_type_name' => 'getPaymentMethodTypeName',
'unclaimed' => 'getUnclaimed',
'amount' => 'getAmount',
'paid' => 'getPaid',
'date' => 'getDate',
'acquirer_name' => 'getAcquirerName',
'acquirer_id' => 'getAcquirerId',
'payment_data' => 'getPaymentData',
'trx' => 'getTrx',
'calltrx' => 'getCalltrx',
'card_circuit_id' => 'getCardCircuitId',
'card_circuit_name' => 'getCardCircuitName',
'ticket_circuit' => 'getTicketCircuit',
'ticket_name' => 'getTicketName',
'ticket_id' => 'getTicketId',
'code' => 'getCode',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'deleted_at' => 'getDeletedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sale_id'] = isset($data['sale_id']) ? $data['sale_id'] : null;
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        $this->container['payment_method_name'] = isset($data['payment_method_name']) ? $data['payment_method_name'] : null;
        $this->container['payment_method_type_id'] = isset($data['payment_method_type_id']) ? $data['payment_method_type_id'] : null;
        $this->container['payment_method_type_name'] = isset($data['payment_method_type_name']) ? $data['payment_method_type_name'] : null;
        $this->container['unclaimed'] = isset($data['unclaimed']) ? $data['unclaimed'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['acquirer_name'] = isset($data['acquirer_name']) ? $data['acquirer_name'] : null;
        $this->container['acquirer_id'] = isset($data['acquirer_id']) ? $data['acquirer_id'] : null;
        $this->container['payment_data'] = isset($data['payment_data']) ? $data['payment_data'] : null;
        $this->container['trx'] = isset($data['trx']) ? $data['trx'] : null;
        $this->container['calltrx'] = isset($data['calltrx']) ? $data['calltrx'] : null;
        $this->container['card_circuit_id'] = isset($data['card_circuit_id']) ? $data['card_circuit_id'] : null;
        $this->container['card_circuit_name'] = isset($data['card_circuit_name']) ? $data['card_circuit_name'] : null;
        $this->container['ticket_circuit'] = isset($data['ticket_circuit']) ? $data['ticket_circuit'] : null;
        $this->container['ticket_name'] = isset($data['ticket_name']) ? $data['ticket_name'] : null;
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_method_id'] === null) {
            $invalidProperties[] = "'payment_method_id' can't be null";
        }
        if ($this->container['payment_method_name'] === null) {
            $invalidProperties[] = "'payment_method_name' can't be null";
        }
        if ($this->container['payment_method_type_id'] === null) {
            $invalidProperties[] = "'payment_method_type_id' can't be null";
        }
        if ($this->container['payment_method_type_name'] === null) {
            $invalidProperties[] = "'payment_method_type_name' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sale_id
     *
     * @return int
     */
    public function getSaleId()
    {
        return $this->container['sale_id'];
    }

    /**
     * Sets sale_id
     *
     * @param int $sale_id sale_id
     *
     * @return $this
     */
    public function setSaleId($sale_id)
    {
        $this->container['sale_id'] = $sale_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return int
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param int $payment_method_id payment_method_id
     *
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_method_name
     *
     * @return string
     */
    public function getPaymentMethodName()
    {
        return $this->container['payment_method_name'];
    }

    /**
     * Sets payment_method_name
     *
     * @param string $payment_method_name payment_method_name
     *
     * @return $this
     */
    public function setPaymentMethodName($payment_method_name)
    {
        $this->container['payment_method_name'] = $payment_method_name;

        return $this;
    }

    /**
     * Gets payment_method_type_id
     *
     * @return int
     */
    public function getPaymentMethodTypeId()
    {
        return $this->container['payment_method_type_id'];
    }

    /**
     * Sets payment_method_type_id
     *
     * @param int $payment_method_type_id payment_method_type_id
     *
     * @return $this
     */
    public function setPaymentMethodTypeId($payment_method_type_id)
    {
        $this->container['payment_method_type_id'] = $payment_method_type_id;

        return $this;
    }

    /**
     * Gets payment_method_type_name
     *
     * @return string
     */
    public function getPaymentMethodTypeName()
    {
        return $this->container['payment_method_type_name'];
    }

    /**
     * Sets payment_method_type_name
     *
     * @param string $payment_method_type_name payment_method_type_name
     *
     * @return $this
     */
    public function setPaymentMethodTypeName($payment_method_type_name)
    {
        $this->container['payment_method_type_name'] = $payment_method_type_name;

        return $this;
    }

    /**
     * Gets unclaimed
     *
     * @return bool
     */
    public function getUnclaimed()
    {
        return $this->container['unclaimed'];
    }

    /**
     * Sets unclaimed
     *
     * @param bool $unclaimed unclaimed
     *
     * @return $this
     */
    public function setUnclaimed($unclaimed)
    {
        $this->container['unclaimed'] = $unclaimed;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool $paid paid
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets acquirer_name
     *
     * @return string
     */
    public function getAcquirerName()
    {
        return $this->container['acquirer_name'];
    }

    /**
     * Sets acquirer_name
     *
     * @param string $acquirer_name acquirer_name
     *
     * @return $this
     */
    public function setAcquirerName($acquirer_name)
    {
        $this->container['acquirer_name'] = $acquirer_name;

        return $this;
    }

    /**
     * Gets acquirer_id
     *
     * @return int
     */
    public function getAcquirerId()
    {
        return $this->container['acquirer_id'];
    }

    /**
     * Sets acquirer_id
     *
     * @param int $acquirer_id acquirer_id
     *
     * @return $this
     */
    public function setAcquirerId($acquirer_id)
    {
        $this->container['acquirer_id'] = $acquirer_id;

        return $this;
    }

    /**
     * Gets payment_data
     *
     * @return string
     */
    public function getPaymentData()
    {
        return $this->container['payment_data'];
    }

    /**
     * Sets payment_data
     *
     * @param string $payment_data payment_data
     *
     * @return $this
     */
    public function setPaymentData($payment_data)
    {
        $this->container['payment_data'] = $payment_data;

        return $this;
    }

    /**
     * Gets trx
     *
     * @return string
     */
    public function getTrx()
    {
        return $this->container['trx'];
    }

    /**
     * Sets trx
     *
     * @param string $trx trx
     *
     * @return $this
     */
    public function setTrx($trx)
    {
        $this->container['trx'] = $trx;

        return $this;
    }

    /**
     * Gets calltrx
     *
     * @return string
     */
    public function getCalltrx()
    {
        return $this->container['calltrx'];
    }

    /**
     * Sets calltrx
     *
     * @param string $calltrx calltrx
     *
     * @return $this
     */
    public function setCalltrx($calltrx)
    {
        $this->container['calltrx'] = $calltrx;

        return $this;
    }

    /**
     * Gets card_circuit_id
     *
     * @return int
     */
    public function getCardCircuitId()
    {
        return $this->container['card_circuit_id'];
    }

    /**
     * Sets card_circuit_id
     *
     * @param int $card_circuit_id card_circuit_id
     *
     * @return $this
     */
    public function setCardCircuitId($card_circuit_id)
    {
        $this->container['card_circuit_id'] = $card_circuit_id;

        return $this;
    }

    /**
     * Gets card_circuit_name
     *
     * @return string
     */
    public function getCardCircuitName()
    {
        return $this->container['card_circuit_name'];
    }

    /**
     * Sets card_circuit_name
     *
     * @param string $card_circuit_name card_circuit_name
     *
     * @return $this
     */
    public function setCardCircuitName($card_circuit_name)
    {
        $this->container['card_circuit_name'] = $card_circuit_name;

        return $this;
    }

    /**
     * Gets ticket_circuit
     *
     * @return string
     */
    public function getTicketCircuit()
    {
        return $this->container['ticket_circuit'];
    }

    /**
     * Sets ticket_circuit
     *
     * @param string $ticket_circuit ticket_circuit
     *
     * @return $this
     */
    public function setTicketCircuit($ticket_circuit)
    {
        $this->container['ticket_circuit'] = $ticket_circuit;

        return $this;
    }

    /**
     * Gets ticket_name
     *
     * @return string
     */
    public function getTicketName()
    {
        return $this->container['ticket_name'];
    }

    /**
     * Sets ticket_name
     *
     * @param string $ticket_name ticket_name
     *
     * @return $this
     */
    public function setTicketName($ticket_name)
    {
        $this->container['ticket_name'] = $ticket_name;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param int $ticket_id ticket_id
     *
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
